// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          String   @id @default(cuid())
  name        String
  sku         String   @unique
  category    String
  description String?
  unit        String   // e.g., "pieces", "kg", "liters"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  inventoryItems InventoryItem[]
  alerts         Alert[]
  promotions     Promotion[]
  orderPredictions OrderPrediction[]
  banditArms     BanditArm[]

  @@map("products")
}

model InventoryItem {
  id            String   @id @default(cuid())
  productId     String
  batchNumber   String?
  quantity      Float
  unitPrice     Float
  expiryDate    DateTime
  location      String   // warehouse location
  status        ItemStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  alerts        Alert[]
  pickups       PickupItem[]

  @@map("inventory_items")
}

model Alert {
  id            String      @id @default(cuid())
  productId     String
  inventoryItemId String?
  type          AlertType
  severity      AlertSeverity
  message       String
  isRead        Boolean     @default(false)
  isResolved    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  product       Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem? @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@map("alerts")
}

model Promotion {
  id          String   @id @default(cuid())
  productId   String
  title       String
  description String
  discountPercentage Float
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("promotions")
}

model Pickup {
  id          String   @id @default(cuid())
  customerName String
  customerEmail String?
  customerPhone String?
  pickupDate  DateTime
  status      PickupStatus @default(PENDING)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  items       PickupItem[]

  @@map("pickups")
}

model PickupItem {
  id            String   @id @default(cuid())
  pickupId      String
  inventoryItemId String
  quantity      Float
  createdAt     DateTime @default(now())

  // Relations
  pickup        Pickup   @relation(fields: [pickupId], references: [id], onDelete: Cascade)
  inventoryItem InventoryItem @relation(fields: [inventoryItemId], references: [id], onDelete: Cascade)

  @@map("pickup_items")
}

// Multi-Armed Bandit System Models
model OrderPrediction {
  id            String   @id @default(cuid())
  productId     String
  predictedQuantity Float
  predictedOrderDate DateTime
  confidence    Float   // 0-1 confidence score
  algorithm     String  // "polynomial", "bandit", "hybrid"
  features      Json    // Stored features used for prediction
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("order_predictions")
}

model BanditArm {
  id            String   @id @default(cuid())
  productId     String
  armType       String   // "conservative", "aggressive", "balanced", "seasonal"
  parameters    Json     // Arm-specific parameters
  rewardHistory Json     // Array of historical rewards
  pullCount     Int      @default(0)
  totalReward   Float    @default(0)
  averageReward Float    @default(0)
  explorationRate Float  @default(0.1)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("bandit_arms")
}

model OrderHistory {
  id            String   @id @default(cuid())
  productId     String
  orderDate     DateTime
  orderQuantity Float
  actualDemand  Float    // Actual demand after order
  leadTime      Int      // Days from order to arrival
  cost          Float
  revenue       Float?
  profit        Float?
  seasonality   String?  // "spring", "summer", "fall", "winter"
  externalFactors Json?  // Weather, events, etc.
  createdAt     DateTime @default(now())

  @@map("order_history")
}

model DemandForecast {
  id            String   @id @default(cuid())
  productId     String
  forecastDate  DateTime
  predictedDemand Float
  confidence    Float
  modelType     String   // "polynomial", "seasonal", "trend"
  features      Json
  createdAt     DateTime @default(now())

  @@map("demand_forecasts")
}

enum ItemStatus {
  ACTIVE
  EXPIRED
  DISPOSED
  RESERVED
}

enum AlertType {
  EXPIRY_WARNING
  LOW_STOCK
  EXPIRED_ITEM
  PROMOTION_OPPORTUNITY
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum PickupStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
